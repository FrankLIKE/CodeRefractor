#include <vector>
#include <string>
static std::vector<int> _stringLength;
static std::vector<int> _stringJumps;

void buildStringTable();
void mapLibs();
void RuntimeHelpersBuildConstantTable();


void initializeRuntime()
{
	buildStringTable();
	mapLibs();
	RuntimeHelpersBuildConstantTable();
}
extern const wchar_t _stringTable[];
const wchar_t* _str(int index)
{
	auto jumpTo = _stringJumps[index];
	return &(_stringTable[jumpTo]);
}

void _AddJumpAndLength(int jump, int length)
{
	_stringJumps.push_back(jump);
	_stringLength.push_back(length);
}

static std::vector<System::Byte*> _constTables;
System::Byte* RuntimeHelpers_GetBytes(int id)
{
	return _constTables[id];
}

void AddConstantByteArray(System::Byte* data)
{
	_constTables.push_back(data);
}
#ifdef _WIN32

#include <windows.h>

HMODULE LoadNativeLibrary(const System::Char* dllFileName)
{
	return LoadLibraryW(dllFileName);
}

void* LoadNativeMethod(HMODULE module, const char* methodName)
{
	return (void*)GetProcAddress(module, methodName);
}
#else
#include <dlfcn.h>

void* LoadNativeLibrary(const char* dllFileName)
{
	return dlopen(dllFileName, RTLD_LAZY);
}

void* LoadNativeMethod(void* module, const char* methodName)
{
	return (void*)dlsym(module, methodName);
}
#endif

#include <stdio.h>
#include <math.h>

std::shared_ptr< Array < System::String> > System::getArgumentsAsList (int argc, char**argv)
{
	auto result = std::shared_ptr< Array < System::String> >(new Array < System::String> (argc));
	for(auto i=0;i<argc;i++){
		(*result)[i] = System::String(argv[i]);
	}
	return result;
}


void System_Console__WriteLine(const wchar_t* value)
{
	wprintf(L"%ls\n", value);	
}
