Buna, sunt Ciprian Khlud si in urmatoarele minute am sa va prezint CodeRefractor - un proiect ce arata o tehnica de compilare a bytecode-ului .Net in executabil masina.

CodeRefractor compileaza masinile virtuale bazate pe stiva folosind tehnicile de compilare Ahead of time.

O masina virtuala bazata pe stiva are o stiva in care pastreaza valori si instructiunile acelei masini virtuale fie impingand valori pe stiva, fie fac diferite operatii, de exemplu o adunare ce inlocuieste valorile din varful stivei cu rezultatul operatiei.

CodeRefractor va citi instructiunile din assembly-ul .Net, numit MSIL sau CIL si il va rescrie intai intr-un set de instructiuni intermediare, apoi va aplica optimizari si in cele din urma va genera cod C++ ce reflecta semantica instructiunilor initiale.

Citirea instructiunilor va face ca sa rescrie instructiunile masinii virtuale pe stiva ca masina virtuala bazata pe registri.

Apoi se vor aplica optimizari, care pot fi diferite in functie de cat de mare este secventa de instructiuni ce le citeste: o instructiune, o secventa de instructiuni fara salturi, instructiuni globale - adica ce lucreaza peste mai multe blocuri de instructiuni in intreg corpul functiei, sau optimizari peste intreaga functie.

Optimizarile bazate pe blocuri: majoritatea optimizarilor din literatura sunt suportate

CodeRefractor indexeaza folosirile de variabile, etichete si tipurilor de instructiuni, ce face posibil ca majoritatea optimizarilor sa fie globale, dar fara a folosi algoritmi avansati de optimizare

Sunt pentru referinta si cateva optimizari globale: dataflow analysis ca fiind Constant Dataflow propagation si Reachability Lines (o forma mai puternica de dead-code elimination) respectiv LICM (ce calculeaza doar o data in bucle lucrurile ce nu trebuie recalculate de fiecare data.

InterProcedural Optimizations - CodeRefractor face inline automat la proprietati simple dar este posibil (cel putin in viitor) sa faca si inlining la alte parti de cod.

Doua optimizari ce sunt acceptate dar nu sunt in practica implementate in lumea .Net (dar cel putin a EA e implementata in HotSpot): calcularea puritatii functiilor ce imbunatateste multe optimizari, respectiv Escape Analysis ce elimina in multe situatii RefCounting-ul.
